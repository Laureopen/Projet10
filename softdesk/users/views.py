from django.shortcuts import render
from django.contrib.auth import get_user_model
from rest_framework import viewsets, permissions
from .serializers import UserSerializer
from rest_framework.exceptions import ValidationError
from rest_framework.response import Response
from rest_framework import status


class UserViewSet(viewsets.ModelViewSet):
    """
    ViewSet pour g√©rer les utilisateurs.
    Fournit les actions CRUD sur le mod√®le User personnalis√©.
    Restreint l'acc√®s aux utilisateurs authentifi√©s.
    """
    queryset = get_user_model().objects.all().order_by('id')
    serializer_class = UserSerializer
    permission_classes = [permissions.IsAuthenticated]

    def create(self, request, *args, **kwargs):
        """
        Cr√©e un nouvel utilisateur avec gestion personnalis√©e des erreurs de validation.
        Si la validation √©choue, retourne un message d'erreur sp√©cifique li√© √† la date de naissance
        dans la r√©ponse JSON, avec le m√™me contenu que les donn√©es envoy√©es.
        En cas de succ√®s, retourne les donn√©es de l'utilisateur avec un message de confirmation.
        """
        serializer = self.get_serializer(data=request.data)
        try:
            serializer.is_valid(raise_exception=True)
        except ValidationError as e:
            # Construit une r√©ponse avec les m√™mes champs, mais un message d‚Äôerreur
            data = request.data.copy()
            data["message"] = e.detail.get("date_of_birth", ["Erreur inconnue"])[0]
            return Response(data, status=status.HTTP_400_BAD_REQUEST)

        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        data = serializer.data
        data["message"] = "Votre compte a √©t√© cr√©√© avec succ√®s ! üéâ"
        return Response(data, status=status.HTTP_201_CREATED, headers=headers)



    def update(self, request, *args, **kwargs):
        user = self.get_object()
        if user != request.user:
            return Response({"Message": "Vous n'avez pas le droit de modifier ce compte."}, status=403)
        return super().update(request, *args, **kwargs)

    def destroy(self, request, *args, **kwargs):
        user = self.get_object()
        if user != request.user:
            return Response({"Message": "Vous n'avez pas le droit de supprimer ce compte."}, status=403)
        return super().destroy(request, *args, **kwargs)






